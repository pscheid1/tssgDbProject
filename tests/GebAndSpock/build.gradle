import groovy.io.FileType
import groovy.xml.MarkupBuilder
import groovy.json.JsonOutput
import org.apache.tools.ant.taskdefs.condition.Os

import static groovyx.net.http.HttpBuilder.configure
//import static groovyx.net.http.ContentTypes.JSON
import groovyx.net.http.HttpBuilder
//import static groovy.json.JsonOutput.prettyPrint

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies { 
        classpath group: 'io.github.http-builder-ng', name: 'http-builder-ng-core', version: '1.0.3'
    }
}

plugins {
    id "idea"
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id "com.energizedwork.idea-base" version "1.4"
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "firefoxLocal", "chrome", "chromeLocal"]
    //drivers = ["firefox","firefoxLinux"]
    //drivers = ["chrome"]
    //drivers = ["firefox"]

    ext {
        groovyVersion = '2.5.11'
        //gebVersion = '2.2'
        gebVersion = '3.4'
        seleniumVersion = '3.141.59'
        chromeDriverVersion = '81.0.4044.138'
        geckoDriverVersion = '0.26.0'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
        systemProperties System.properties

    }
}

// Checking if this code is needed.
//test {
//    dependsOn drivers.collect { tasks["${it}Test"] }
//    enabled = false
//    systemProperties System.properties
//
//}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

def xrayTestExecutionsJson

// Initialize and accumulate the test case execution results per test key
tasks.withType(Test) {
    //maxParallelForks = 2
    println "--------------------------"
    println "task = ${it}"
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
    }
    ignoreFailures = true

    // Setup variables to use for getting Xray to import test results
    def testKeyMatcher
    def testKey
    def testStatus
    def xrayTestExecution =  [
            testKey: '',
            //start: '',
            //finish: '',
            comment: '',
            status: ''
    ]

    // Check which OS is installed.
    // Make assumptions that either Git Bash is installed on Windows,
    // or bash is installed on Linux.
    def bashPlatforms = [Linux:'bash', Windows:'c:/Program Files/Git/bin/bash.exe']
    def osName = System.properties['os.name']
    println "os.name = " + osName
    def bashPathName

    switch (osName) {
        case ~/^Windows.*/:
            bashPathName = bashPlatforms.Windows
            break
        case 'Linux':
            bashPathName = bashPlatforms.Linux
            break
        default:
            bashPathName
            throw new GradleException("Platform \"${osName}\" is not known!")
            break
    }

    // Test that bash is available.
    println "pwd = " + [bashPathName, '-c', 'pwd'].execute().text
    println "path = " + [bashPathName, '-c', 'echo $PATH'].execute().text
    println "git version = " + [bashPathName, '-c', 'git --version'].execute().text

    // Get the latest version tag for this branch.
    def version = [bashPathName, '-c', 'git tag | tail -1'].execute().text
    println "version = " + version

    // Get the latest revision tag for this branch.
    def revision = [bashPathName, '-c', 'git describe --tags'].execute().text
    println "revision = " + revision

    def xrayTestExecutions = [
        info: [
            summary: "TE: Execution of automated tests for release ${version[0..-2]}",
            description: 'This execution is automatically created when importing execution results from an external source',
            version: "${version}"[1..-2],
            //user: System.properties['jira.test.executor'],
            revision: "${revision}"[1..-2]
            //startDate: '',
            //finishDate: '',
            //testPlanKey: 'SPIN-4',
            //testEnvironments: [System.properties['geb.build.baseUrl']]
        ],
        tests: [
        ]
    ]

    // Pass system properties to the Geb JVM from the Gradle JVM
    systemProperties['browser.location'] = System.properties['browser.location']
    systemProperties['geb.build.baseUrl'] = System.properties['geb.build.baseUrl']

    onOutput { desc, event ->
        testKeyMatcher = event.message =~ /TWS-\d+/
        if (testKeyMatcher) {
            println "event.message: ${event.message}"
            testKey = testKeyMatcher.group()
            //logger.quiet "Test Event Message: ${testKeyMatcher.group()}: ${event.message}"
        }
    }

    // Collect the test key, name, and status after each test run
    afterTest { desc, result ->
        logger.quiet "Executed test ${testKey}: ${desc.name} [${desc.className}] with result: ${result.resultType}"
        xrayTestExecution.testKey = testKey
        xrayTestExecution.comment = "${desc.name} [${desc.className}]"
        // Translate test results into Xray test statuses
        switch (result.resultType) {
            case 'SUCCESS':
                xrayTestExecution.status = 'PASS'
                break
            case 'FAILURE':
                xrayTestExecution.status = 'FAIL'
                //xrayTestExecution.comment += "\nEvent Message: Start ${event.message}"
                break
            default:
                xrayTestExecution.status = 'TODO'
                break
        }
        xrayTestExecutions.tests << xrayTestExecution
        xrayTestExecution =  [
                testKey: '',
                //start: '',
                //finish: '',
                comment: '',
                status: ''
        ]
        if (result.resultType == 'FAILURE') {
            logger.quiet "Event Message: Start ${event.message}"
        }
        xrayTestExecutionsJson = JsonOutput.toJson(xrayTestExecutions)
    }
}

// Call xray to import the test execution results
task xrayImport {
    description 'Call xray to import the test execution results.  Requires jira.auth property.'
    doLast {
        println JsonOutput.prettyPrint(xrayTestExecutionsJson)
        def username = System.properties['jira.username']
        def password = System.properties['jira.password']
        def creds = "${username}:${password}".bytes.encodeBase64()

        def jiraWeb = HttpBuilder.configure {
            request.uri = 'http://jira.web.technologynursery.org'
            //request.headers['Authorization'] = 'Basic ' + System.properties['jira.auth']
            request.headers['Authorization'] = "Basic $creds"
            //request.auth.basic username, password
            request.contentType = 'application/json'
        }
        
        def xrayResult = jiraWeb.post {
            request.uri.path = '/rest/raven/1.0/import/execution'
            request.body = xrayTestExecutionsJson
        }
        
        println "Result = " + xrayResult
    }
}

xrayImport.mustRunAfter chromeTest
xrayImport.mustRunAfter chromeLocalTest
xrayImport.mustRunAfter firefoxTest
xrayImport.mustRunAfter firefoxLocalTest

task reportSnaps {
    doLast {
        def listUnsorted = []
        def list = []
        def unixPath

        def dir = new File("build/reports")
        dir.eachFileRecurse(FileType.FILES) { file ->
            unixPath = file.path.replace("\\", "/")
            if (unixPath.contains("/geb/")) {
                listUnsorted << file
            }
        }

        list = listUnsorted.sort()
        list.each {
            println it.path.replace("\\", "/")
        }

        generateScreenshotsReportsPage(list)
    }
}

reportSnaps.mustRunAfter chromeTest
reportSnaps.mustRunAfter chromeLocalTest
reportSnaps.mustRunAfter firefoxTest
reportSnaps.mustRunAfter firefoxLocalTest

/**
 * Generate an html page that contains links to the Report Screnshots
 * and other report artifact files.
 *
 * @param list - A list of report artifact File objects.
 */
void generateScreenshotsReportsPage(list) {

    def reportArtifactsHtmlFile = new File('build/reports/reportArtifacts.html')
    def writer = new StringWriter()
    def html = new MarkupBuilder(writer)
    def now = new Date()
    html.html {
        head {
            title "Report Screen Shots"
        }
        body(id: "main") {
            h2 id: "report-files",  "Report Artifact Files"
            ul {
                list.each { reportArtifactFile ->
                    li {
                        // Build link and extract the filename from the path
                        a( href: removeFirstTwoDirectoriesFromPath(reportArtifactFile.path.replace("\\","/")),
                                removeFirstTwoDirectoriesFromPath(reportArtifactFile.path.replace("\\","/")) )    // display relative path
                        //reportArtifactFile.path.split(File.separator)[-1] )           // display just filename
                    }
                }
            }
            h3 "Report Generated Time"
            p now
        }
    }
    reportArtifactsHtmlFile.write writer.toString()
}

/**
 * Removes the first two directories from the path
 *
 * @parm reportFile -The reportFile
 */
String removeFirstTwoDirectoriesFromPath(String reportArtifactFilePath) {
    String reportFileNewPath = ""
    reportArtifactFilePath.split('/')[2..-1].each {
        // Rebuild the path
        reportFileNewPath += ( it + '/' )
    }
    // Return path with last character from path removed
    reportFileNewPath[0..-2]
}

//apply from: "gradle/ci.gradle"
