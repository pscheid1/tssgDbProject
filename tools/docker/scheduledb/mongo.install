#!/usr/bin/env bash
#help mongo.install                              # Hard install the mongo services

. scheduledb.env
logsDirValidate
# Redirect STDERR to STDOUT

msg BEGIN "Clean up and Install the mongo db services ..."

msg INFO "Remove mongo and mongo-express containers and volumes ...
$(  exec 2>&1
docker-compose rm -f -s -v mongo
docker-compose rm -f -s -v mongo-express
)"

imagesDanglingRemove

msg INFO "Build the mongo db and mongo-express images and start containers ...
$( exec 2>&1
docker-compose up -d --build mongo
# Start Mongo Express except on s14
[ $(hostname) != "Ubuntu-Studio-14" ] && docker-compose up -d --build mongo-express
)"

msg WAIT "Wait for mongo service to normalize. Check every 2s ...
$( exec 2>&1
maxTries=150
try=0
while [ "$(docker exec scheduledb_mongo_1 bash -c 'echo "db.runCommand(\"ping\").ok" | mongo localhost:27017/test --quiet')" != "1" ]
do
    sleep 2s
    ((++try))
    msg INFO "$try "
    if [ $try -gt $maxTries ] ; then
        echo -e "\n"
        msg ERROR "Mongo took over 1 min to come up.  Exiting."
        exit
    fi
done
sleep 5s
)"

msg INFO "Initialize the tssg-tech mongo database when the service is ready ...
$( exec 2>&1
maxTries=150
try=0
until docker exec scheduledb_mongo_1 bash -c "\
    cd /root; \
    mongorestore \
        -u root \
        -p sch3dul3db \
        --authenticationDatabase admin \
        --authenticationMechanism SCRAM-SHA-1 \
        --db tssg-tech \
        tssg-tech 2>&1 | grep 'done'"
do
    sleep 5s
    ((++try))
    msg INFO "Retrying again $try ..."
    if [ $try -gt $maxTries ] ; then
        echo -e "\n"
        msg ERROR "Mongorestore took could not complete successfully. Exiting."
        exit
    fi
done
)"

msg INFO "Mongo can be accessed on port 27017"
if docker ps | grep -q express ; then
    msg INFO "Mongo Express can be accessed on port 8081"
else
    msg INFO "Mongo Express was not started."
fi

msg END "... done."
