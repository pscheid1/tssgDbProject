# scheduledb
version: '3.1'
# version: '2.0'

services:

  dns:
    image: sdb-dnsmasq:1.0
    build:
      context: ./dnsmasq
      dockerfile: dnsmasq-Dockerfile
    ports:
      - ${SDB_HOST_IP}:53:53/udp
      - 5380:8080
    environment:
      - HTTP_USER=dnsadmin
      - HTTP_PASS=dnsadminpw
    restart: always
  
  nginx:
    image: sdb-nginx:1.19.2-1.0
    build:
      context: ./nginx
      dockerfile: nginx-Dockerfile
    environment:
      - SDB_HOST_IP=${SDB_HOST_IP}
    ports:
      - 80:80
    dns:
      - ${SDB_HOST_IP}
  
  mongo:
    image: tssg-mongo:${mongoVersion}
    build:
      context: .
      dockerfile: mongo-Dockerfile
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: sch3dul3db
    command: --config /etc/mongod.conf

  mongo-express:
    image: mongo-express
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: sch3dul3db

  backend:
    image: tssg-node-backend:${backendVersion}
    build:
        context: .
        dockerfile: backend-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      NODE_ENV: production
      # MONGO_URL declares the standard format of the MongoDB connection URI used to connect to a MongoDB
      MONGO_URL: ${MONGO_URL}
      # BACKEND_DEFAULT_TEAM delclares a default team for the meetings/webSchedule/ route
      # any valid team name can be used.
      BACKEND_DEFAULT_TEAM: ${BACKEND_DEFAULT_TEAM}
      # BACKEND_ACCESS_JWT sets the access jwt validity length in MINUTES.
      # set BACKEND_ACCESS_JWT >= 1 and <= 30 or backend code will force it to default value.
      BACKEND_ACCESS_JWT: ${BACKEND_ACCESS_JWT}
      # BACKEND_REFRESH_JWT sets the refresh jwt validity length in MINUTES.
      # set BACKEND_REFRESH_JWT > BACKEND_ACCESS_JWT and <= 240 or backend code will force it to default value.
      BACKEND_REFRESH_JWT: ${BACKEND_REFRESH_JWT}
      BACKEND_VERSION: ${backendVersion}
      FRONTEND_VERSION: ${frontendVersion}
    expose:
      - ${BACKEND_BASE_PORT}
    command: /bin/bash backend.start

  frontend:
    image: tssg-node-frontend:${frontendVersion}
    build:
        context: .
        dockerfile: frontend-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      BACKEND_VERSION: ${backendVersion}
      FRONTEND_VERSION: ${frontendVersion}
      NODE_ENV: production
      TSSGAPIURL: ${TSSGAPIURL}
      # - NODE_ENV=production
      # - TSSGAPIURL
    expose:
      - ${FRONTEND_PORT}
    command: /bin/bash frontend.start

  website:
    image: tssg-node-website:${websiteVersion}
    build:
        context: .
        dockerfile: website-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      NODE_ENV: production
      WEBSITE_URL: ${WEBSITE_URL}
      WEBSITE_PORT: ${WEBSITE_PORT}
      BACKEND_BASE_URL: "http://backend.sdb"
      BACKEND_BASE_PORT: 80
    expose:
      - ${WEBSITE_PORT}
    command: /bin/bash website.start

  wireshark:
    image: sdb-wireshark:${wiresharkVersion}
    build:
      context: ./wireshark/
      dockerfile: wireshark-Dockerfile
    container_name: wireshark
    cap_add:
      - NET_ADMIN
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - DISPLAY=${DISPLAY}
    ports:
      - 3000:3000 #optional
    restart: unless-stopped
    volumes:
      - ./wireshark/config:/config
      - /tmp/.X11-unix:/tmp/.X11-unix

volumes:
  mongodb:
