# scheduledb
#version: '3.1'
version: '2.0'

services:

  nginx:
    image: sdb-nginx:1.19.2-1.0
    build:
      context: ./nginx
      dockerfile: nginx-Dockerfile
    ports:
      - 80:80
    volumes:
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
  
  mongo:
    image: tssg-mongo:${mongoVersion}
    build:
      context: .
      dockerfile: mongo-Dockerfile
    expose:
      - 27017
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: sch3dul3db
    command: --config /etc/mongod.conf

  mongo-express:
    image: mongo-express
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: sch3dul3db

  backend:
    image: tssg-node-backend:${backendVersion}
    build:
        context: .
        dockerfile: backend-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      NODE_ENV: production
      tssgMongoDB_URL: "mongodb://root:sch3dul3db@mongo:27017/tssg-tech?authSource=admin"
      #tssgApiMtgDebug enables/disables additional meeting setup debug code (output appeaars in backend log)
      tssgApiMtgDebug: ${tssgApiMtgDebug}
      #tssgApiDefaultTeam delclares a default team for the meetings/webSchedule/ route
      #any valid team name can be used.
      tssgApiDefaultTeam: ${tssgApiDefaultTeam}
      #tssgJwtExp sets the jwt token validity length in minutes.
      #set 1 >= tssgJwtExp <= 240 or backend code will force it to default value.
      tssgJwtExp: ${tssgJwtExp}
      #the following files do not have to be in pem format.
      #server private key 
      tssgServerKey: ${tssgServerKey}
      #server certificate
      tssgServerCrt: ${tssgServerCrt}
      #CA certificate
      tssgCaCrt: ${tssgCaCrt}
      #CA certificate revocation list
      tssgCaCrl: ${tssgCaCrl}
      BACKEND_VERSION: ${backendVersion}
      FRONTEND_VERSION: ${frontendVersion}
    expose:
      - ${BACKEND_BASE_PORT}
    command: /bin/bash backend.start
    
  frontend:
    image: tssg-node-frontend:${frontendVersion}
    build:
        context: .
        dockerfile: frontend-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
      - TSSGAPIURL
    expose:
     - ${FRONTEND_PORT}
    ports:
     - ${FRONTEND_PORT}:${FRONTEND_PORT}
    # command: node_modules/@angular/cli/bin/ng serve
    command: /bin/bash frontend.start
    
  website:
    image: tssg-node-website:${websiteVersion}
    build:
        context: .
        dockerfile: website-Dockerfile
    user: "node"
    working_dir: /home/node/app
    environment:
      NODE_ENV: production
      WEBSITE_URL: ${WEBSITE_URL}
      WEBSITE_PORT: ${WEBSITE_PORT}
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      BACKEND_BASE_PORT: ${BACKEND_BASE_PORT}
    expose:
      - ${WEBSITE_PORT}
    command: /bin/bash website.start
    
volumes:
  mongodb:
