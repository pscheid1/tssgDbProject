# scheduledb
#version: '3.1'
version: '2.0'

services:

  mongo:
    image: tssg-mongo:${mongoVersion}
    build:
      context: .
      dockerfile: mongo-Dockerfile
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: sch3dul3db
    command: --config /etc/mongod.conf

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: sch3dul3db

  backend:
    image: tssg-node-backend:${backendVersion}
    build:
        context: .
        dockerfile: backend-Dockerfile
    restart: always        
    user: "node"
    working_dir: /home/node/app
    environment:
      NODE_ENV: production
      tssgMongoDB_URL: "mongodb://root:sch3dul3db@mongo:27017/tssg-tech?authSource=admin"
      tssgApiURL: backend
      tssgApiPort: 7010
      #tssgApiPort: 4433
      tssgApiProtocol: http
      # tssgApiProtocol: https
      #tssgApiMtgDebug enables/disables additional meeting setup debug code (output appeaars in backend log)
      tssgApiMtgDebug:  "false"
      #tssgApiDefaultTeam delclares a default team for the meetings/webSchedule/ route
      #any valid team name can be used.
      tssgApiDefaultTeam: WedGenMtg
      #tssgJwtExp sets the jwt token validity length in minutes.
      #set 1 >= tssgJwtExp <= 240 or backend code will force it to default value.
      tssgJwtExp: 30
      #the following files do not have to be in pem format.
      #server private key 
      tssgServerKey: "tssg-server-key.pem"
      #server certificate
      tssgServerCrt: "tssg-server-crt.pem"
      #CA certificate
      tssgCaCrt: "tssg-ca-crt.pem"
      #CA certificate revocation list
      tssgCaCrl: "tssg-ca-crl.pem"
      BACKEND_VERSION: ${backendVersion}
      FRONTEND_VERSION: ${frontendVersion}
    expose:
      - "7010"
      # - "4433"
    ports:
      - 7010:7010
      # - 4433:4433
    command: /bin/bash backend.start
    
  frontend:
    #image: node:lts
    image: tssg-node-frontend:${frontendVersion}
    build:
        context: .
        dockerfile: frontend-Dockerfile
    restart: always        
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
      - TSSGAPIURL
    expose:
     - "4200"
    #  - "4300"
    ports:
     - 4200:4200
      # - 4300:4300
    # command: node_modules/@angular/cli/bin/ng serve
    command: /bin/bash frontend.start
    
volumes:
  mongodb:
