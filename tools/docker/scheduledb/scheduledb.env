# Leverage the NavarroComputing functions
. ../../cmd.env

# Ensure logs directory exists
logsDirValidate() { 
    if [ ! -d logs ] ; then
        mkdir logs
        echo "Created logs directory." 
    fi
    return $?
}

# Image versions
# backend version   1.4 - added refresh token
# frontend version  1.4 - added refresh token
# frontend version  1.5 - added env.js injector
# frontend version  1.6 - fix for missing env.js file
export backendVersion=1.4
export frontendVersion=1.6
export mongoVersion=0.3
export websiteVersion=0.2
export wiresharkVersion=0.9

imagesDanglingRemove() {
    msg INFO "Remove any dangling images ..."
    danglingImageList="$(docker images -aq -f 'dangling=true')"
    if [ -n "$danglingImageList" ] ; then
        docker rmi $(docker images -aq -f 'dangling=true')
    else
        msg INFO "    No dangling images to remove ..."
    fi
}

msg INFO "Determine if we are running on Docker Toolbox or Linux ..."
if [ ! -z "$DOCKER_MACHINE_NAME" ] ; then
    msg INFO "... We are running in Docker Toolbox ..."
    export DOCKER_HOST_SYSTEM="DockerToolbox"
    export SDB_HOST_IP="$(docker-machine ip)"
    export SDB_HOST_PORT="80"
    # browser to service
    export TSSGAPIURL="http://backend.sdb"
    export TSSGAPIPORT="80"
    export TSSGAPPURL="http://frontend.sdb"
    export TSSGAPPPORT="80"
    export WEBSITE_URL="http://website.sdb"
    export WEBSITE_PORT="80"
elif [ "$(hostname)" == "Ubuntu-Studio-14" ] ; then
    msg INFO "... We are running in a Linux server ..."
    export DOCKER_HOST_SYSTEM="LinuxServer"
    export SDB_HOST_IP="$(hostname -I | awk '{print $1}')"
    export SDB_HOST_PORT="81"
    # browser to service
    export TSSGAPIURL="https://backend.sdb.technologynursery.org"
    export TSSGAPIPORT="443"
    export TSSGAPPURL="https://frontend.sdb.technologynursery.org"
    export TSSGAPPPORT="443"
    export WEBSITE_URL="https://website.sdb.technologynursery.org"
    export WEBSITE_PORT="443"
elif grep -q 'host\.docker\.internal' /etc/hosts 2>/dev/null ; then
    msg INFO "... We are running in Docker Desktop ..."
    export DOCKER_HOST_SYSTEM="DockerDesktop"
    export SDB_HOST_IP="$(grep 'host\.docker\.internal' /etc/hosts | awk '{print $1}')"
    export SDB_HOST_PORT="80"
    # browser to service
    export TSSGAPIURL="http://backend.sdb"
    export TSSGAPIPORT="80"
    export TSSGAPPURL="http://frontend.sdb"
    export TSSGAPPPORT="80"
    export WEBSITE_URL="http://website.sdb"
    export WEBSITE_PORT="80"
else
    msg INFO "... We are running in a local Linux ..."
    export DOCKER_HOST_SYSTEM="LinuxLocal"
    export SDB_HOST_IP="$(hostname -I | awk '{print $1}')"
    export SDB_HOST_PORT="80"
    # browser to service
    export TSSGAPIURL="http://backend.sdb"
    export TSSGAPIPORT="80"
    export TSSGAPPURL="http://frontend.sdb"
    export TSSGAPPPORT="80"
    export WEBSITE_URL="http://website.sdb"
    export WEBSITE_PORT="80"
   
fi

# get mongo connection url
# connection string format: mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
export MONGO_URL="mongodb://root:sch3dul3db@mongo:27017/tssg-tech?authSource=admin"

# get backend url and port (browser to backend service)
export BACKEND_URL="${TSSGAPIURL}"
export BACKEND_PORT="${TSSGAPIPORT}"

# get frontend url and port (browser to service)
export FRONTEND_URL="${TSSGAPPURL}"
export FRONTEND_PORT="${TSSGAPPPORT}"

# BACKEND_DEFAULT_TEAM delclares a default team for the meetings/webSchedule/ route
# any valid team name can be used. It can also be set to "default"
# and the code will force it to "WedGenMtg".
export BACKEND_DEFAULT_TEAM="WedGenMtg"

# BACKEND_ACCESS_JWT sets the access jwt validity length in MINUTES.
# set BACKEND_ACCESS_JWT >= 1 and <= 30
# or backend code will force it to default value.
export BACKEND_ACCESS_JWT="20"
# set to one minute for testing
# export BACKEND_ACCESS_JWT="1"

# BACKEND_REFRESH_JWT sets the refresh jwt validity length in MINUTES.
# set BACKEND_REFRESH_JWT > BACKEND_ACCESS_JWT and <= 240
# or backend code will force it to default value.
export BACKEND_REFRESH_JWT="120"
# set to two minutes for testing
# export BACKEND_REFRESH_JWT="2"
